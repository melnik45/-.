# singleton_pattern.py

class Singleton:
    _instance = None

    def __new__(cls):
        if not cls._instance:
            cls._instance = super(Singleton, cls).__new__(cls)
        return cls._instance

def main():
    singleton1 = Singleton()
    singleton2 = Singleton()

    print(singleton1 == singleton2)  # Output: True

if __name__ == "__main__":
    main()
# remove_file.py

import os

def remove_file(file_path):
    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"File '{file_path}' removed successfully.")
    else:
        print(f"File '{file_path}' not found.")

if __name__ == "__main__":
    file_to_remove = "singleton_pattern.py"
    remove_file(file_to_remove)
